name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_ipswich_retail
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov factory-boy black isort flake8
    
    - name: Lint with flake8
      working-directory: ./backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      working-directory: ./backend
      run: |
        black --check .
    
    - name: Check import sorting with isort
      working-directory: ./backend
      run: |
        isort --check-only .
    
    - name: Run tests with pytest
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_ipswich_retail
        SECRET_KEY: test-secret-key
        DEBUG: True
      run: |
        python manage.py migrate
        pytest --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage-report
        path: backend/htmlcov/

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Lint with ESLint
      working-directory: ./frontend
      run: npm run lint
    
    - name: Type check with TypeScript
      working-directory: ./frontend
      run: npx tsc --noEmit
    
    - name: Run tests with Vitest
      working-directory: ./frontend
      run: npm run test:ci || echo "No tests configured yet"
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: ipswich-retail-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: ipswich-retail-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.yml build

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render (placeholder)
      run: |
        echo "Deployment to Render would happen here"
        echo "Configure RENDER_DEPLOY_HOOK_URL secret for actual deployment"
        # curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
    
    - name: Deploy to Railway (placeholder)
      run: |
        echo "Deployment to Railway would happen here"
        echo "Configure RAILWAY_TOKEN secret for actual deployment"
        # railway deploy --token ${{ secrets.RAILWAY_TOKEN }}
